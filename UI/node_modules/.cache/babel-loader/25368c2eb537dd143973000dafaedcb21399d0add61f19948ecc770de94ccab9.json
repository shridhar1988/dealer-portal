{"ast":null,"code":"import Aes from 'crypto-js/aes.js';\nimport CryptoJsCore from 'crypto-js/core.js';\nimport stringify from 'json-stringify-safe';\nimport { createTransform } from 'redux-persist';\nconst makeError = message => new Error(`redux-persist-transform-encrypt: ${message}`);\nexport const encryptTransform = (config, transformConfig) => {\n  if (typeof config === 'undefined') {\n    throw makeError('No configuration provided.');\n  }\n  const {\n    secretKey\n  } = config;\n  if (!secretKey) {\n    throw makeError('No secret key provided.');\n  }\n  const onError = typeof config.onError === 'function' ? config.onError : console.warn;\n  return createTransform((inboundState, _key) => Aes.encrypt(stringify(inboundState), secretKey).toString(), (outboundState, _key) => {\n    if (typeof outboundState !== 'string') {\n      return onError(makeError('Expected outbound state to be a string.'));\n    }\n    try {\n      const decryptedString = Aes.decrypt(outboundState, secretKey).toString(CryptoJsCore.enc.Utf8);\n      if (!decryptedString) {\n        throw new Error('Decrypted string is empty.');\n      }\n      try {\n        return JSON.parse(decryptedString);\n      } catch {\n        return onError(makeError('Failed to parse state as JSON.'));\n      }\n    } catch {\n      return onError(makeError('Could not decrypt state. Please verify that you are using the correct secret key.'));\n    }\n  }, transformConfig);\n};","map":{"version":3,"names":["Aes","CryptoJsCore","stringify","createTransform","makeError","message","Error","encryptTransform","config","transformConfig","secretKey","onError","console","warn","inboundState","_key","encrypt","toString","outboundState","decryptedString","decrypt","enc","Utf8","JSON","parse"],"sources":["C:/Users/ITeos/Desktop/My Projects/Git/Dealer Portal/dealer-portal/UI/node_modules/redux-persist-transform-encrypt/lib/sync.js"],"sourcesContent":["import Aes from 'crypto-js/aes.js';\nimport CryptoJsCore from 'crypto-js/core.js';\nimport stringify from 'json-stringify-safe';\nimport { createTransform } from 'redux-persist';\nconst makeError = (message) => new Error(`redux-persist-transform-encrypt: ${message}`);\nexport const encryptTransform = (config, transformConfig) => {\n    if (typeof config === 'undefined') {\n        throw makeError('No configuration provided.');\n    }\n    const { secretKey } = config;\n    if (!secretKey) {\n        throw makeError('No secret key provided.');\n    }\n    const onError = typeof config.onError === 'function' ? config.onError : console.warn;\n    return createTransform((inboundState, _key) => Aes.encrypt(stringify(inboundState), secretKey).toString(), (outboundState, _key) => {\n        if (typeof outboundState !== 'string') {\n            return onError(makeError('Expected outbound state to be a string.'));\n        }\n        try {\n            const decryptedString = Aes.decrypt(outboundState, secretKey).toString(CryptoJsCore.enc.Utf8);\n            if (!decryptedString) {\n                throw new Error('Decrypted string is empty.');\n            }\n            try {\n                return JSON.parse(decryptedString);\n            }\n            catch {\n                return onError(makeError('Failed to parse state as JSON.'));\n            }\n        }\n        catch {\n            return onError(makeError('Could not decrypt state. Please verify that you are using the correct secret key.'));\n        }\n    }, transformConfig);\n};\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,kBAAkB;AAClC,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,SAAS,MAAM,qBAAqB;AAC3C,SAASC,eAAe,QAAQ,eAAe;AAC/C,MAAMC,SAAS,GAAIC,OAAO,IAAK,IAAIC,KAAK,CAAC,oCAAoCD,OAAO,EAAE,CAAC;AACvF,OAAO,MAAME,gBAAgB,GAAGA,CAACC,MAAM,EAAEC,eAAe,KAAK;EACzD,IAAI,OAAOD,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAMJ,SAAS,CAAC,4BAA4B,CAAC;EACjD;EACA,MAAM;IAAEM;EAAU,CAAC,GAAGF,MAAM;EAC5B,IAAI,CAACE,SAAS,EAAE;IACZ,MAAMN,SAAS,CAAC,yBAAyB,CAAC;EAC9C;EACA,MAAMO,OAAO,GAAG,OAAOH,MAAM,CAACG,OAAO,KAAK,UAAU,GAAGH,MAAM,CAACG,OAAO,GAAGC,OAAO,CAACC,IAAI;EACpF,OAAOV,eAAe,CAAC,CAACW,YAAY,EAAEC,IAAI,KAAKf,GAAG,CAACgB,OAAO,CAACd,SAAS,CAACY,YAAY,CAAC,EAAEJ,SAAS,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,CAACC,aAAa,EAAEH,IAAI,KAAK;IAChI,IAAI,OAAOG,aAAa,KAAK,QAAQ,EAAE;MACnC,OAAOP,OAAO,CAACP,SAAS,CAAC,yCAAyC,CAAC,CAAC;IACxE;IACA,IAAI;MACA,MAAMe,eAAe,GAAGnB,GAAG,CAACoB,OAAO,CAACF,aAAa,EAAER,SAAS,CAAC,CAACO,QAAQ,CAAChB,YAAY,CAACoB,GAAG,CAACC,IAAI,CAAC;MAC7F,IAAI,CAACH,eAAe,EAAE;QAClB,MAAM,IAAIb,KAAK,CAAC,4BAA4B,CAAC;MACjD;MACA,IAAI;QACA,OAAOiB,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC;MACtC,CAAC,CACD,MAAM;QACF,OAAOR,OAAO,CAACP,SAAS,CAAC,gCAAgC,CAAC,CAAC;MAC/D;IACJ,CAAC,CACD,MAAM;MACF,OAAOO,OAAO,CAACP,SAAS,CAAC,mFAAmF,CAAC,CAAC;IAClH;EACJ,CAAC,EAAEK,eAAe,CAAC;AACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}