{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { capitalizeText } from '../common/textOperations';\nexport const personalInformation = createSlice({\n  name: \"Personal Information\",\n  initialState: {\n    userID: \"\",\n    empInfoId: \"\",\n    userName: \"\",\n    userRole: \"\",\n    displayName: \"\",\n    emailAddress: \"\",\n    menuItemNames: \"\",\n    token: \"\",\n    profilePic: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    clientId: \"\",\n    gender: \"\",\n    department: \"\"\n  },\n  reducers: {\n    setUserPersonalInformation: (state, action) => {\n      return state = {\n        userID: action.payload.userID,\n        empInfoId: action.payload.empInfoId,\n        userName: capitalizeText(action.payload.userName),\n        userRole: action.payload.userRole,\n        displayName: action.payload.displayName,\n        emailAddress: action.payload.emailAddress,\n        menuItemNames: action.payload.menuItemNames,\n        token: action.payload.token,\n        profilePic: action.payload.profilePic,\n        firstName: action.payload.firstName,\n        lastName: action.payload.lastName,\n        clientId: action.payload.clientId,\n        department: action.payload.department,\n        gender: action.payload.gender\n      };\n    },\n    changePersonalInfo: (state, action) => {\n      return state = {\n        ...state,\n        profilePic: action.payload.profilePic\n      };\n    },\n    changeApplicationClientIdAndMenuItems: (state, action) => {\n      return state = {\n        ...state,\n        clientId: action.payload.clientId,\n        menuItemNames: action.payload.menuItemNames\n      };\n    },\n    clearPersonalInformation: state => {\n      return state = {\n        userID: \"\",\n        empInfoId: \"\",\n        userName: \"\",\n        userRole: \"\",\n        displayName: \"\",\n        emailAddress: \"\",\n        menuItemNames: \"\",\n        token: \"\",\n        profilePic: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        clientId: \"\",\n        department: \"\",\n        gender: \"\"\n      };\n    }\n  }\n});\nexport const {\n  setUserPersonalInformation,\n  changePersonalInfo,\n  changeApplicationClientIdAndMenuItems,\n  clearPersonalInformation\n} = personalInformation.actions;\nexport default personalInformation.reducer;","map":{"version":3,"names":["createSlice","capitalizeText","personalInformation","name","initialState","userID","empInfoId","userName","userRole","displayName","emailAddress","menuItemNames","token","profilePic","firstName","lastName","clientId","gender","department","reducers","setUserPersonalInformation","state","action","payload","changePersonalInfo","changeApplicationClientIdAndMenuItems","clearPersonalInformation","actions","reducer"],"sources":["C:/Users/ITeos/Desktop/My Projects/Git/Dealer Portal/dealer-portal/UI/src/reduxStorage/personalInformation.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport { capitalizeText } from '../common/textOperations';\r\n\r\nexport const personalInformation = createSlice({\r\n    name: \"Personal Information\",\r\n    initialState: {\r\n        userID: \"\",\r\n        empInfoId:\"\",\r\n        userName: \"\",\r\n        userRole: \"\",\r\n        displayName: \"\",\r\n        emailAddress: \"\",\r\n        menuItemNames: \"\",\r\n        token: \"\",\r\n        profilePic: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        clientId: \"\",\r\n        gender: \"\",\r\n        department: \"\",\r\n    },\r\n\r\n    reducers: {\r\n        setUserPersonalInformation: (state, action) => {\r\n            return state = {\r\n                userID: action.payload.userID,\r\n                empInfoId:action.payload.empInfoId,\r\n                userName: capitalizeText(action.payload.userName),\r\n                userRole: action.payload.userRole,\r\n                displayName: action.payload.displayName,\r\n                emailAddress: action.payload.emailAddress,\r\n                menuItemNames: action.payload.menuItemNames,\r\n                token: action.payload.token,\r\n                profilePic: action.payload.profilePic,\r\n                firstName: action.payload.firstName,\r\n                lastName: action.payload.lastName,\r\n                clientId: action.payload.clientId,\r\n                department: action.payload.department,\r\n                gender: action.payload.gender\r\n            }\r\n        },\r\n\r\n        changePersonalInfo: (state, action) => {\r\n            return state = {\r\n                ...state,\r\n                profilePic: action.payload.profilePic,\r\n            }\r\n        },\r\n\r\n        changeApplicationClientIdAndMenuItems: (state, action) => {\r\n            return state = {\r\n                ...state,\r\n                clientId: action.payload.clientId,\r\n                menuItemNames: action.payload.menuItemNames,\r\n            }\r\n        },\r\n        clearPersonalInformation: (state) => {\r\n            return state = {\r\n                userID: \"\",\r\n                empInfoId:\"\",\r\n                userName: \"\",\r\n                userRole: \"\",\r\n                displayName: \"\",\r\n                emailAddress: \"\",\r\n                menuItemNames: \"\",\r\n                token: \"\",\r\n                profilePic: \"\",\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                clientId: \"\",\r\n                department: \"\",\r\n                gender: \"\",\r\n            };\r\n        },\r\n\r\n    },\r\n})\r\n\r\nexport const { setUserPersonalInformation, changePersonalInfo, changeApplicationClientIdAndMenuItems, clearPersonalInformation } = personalInformation.actions;\r\n\r\nexport default personalInformation.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,cAAc,QAAQ,0BAA0B;AAEzD,OAAO,MAAMC,mBAAmB,GAAGF,WAAW,CAAC;EAC3CG,IAAI,EAAE,sBAAsB;EAC5BC,YAAY,EAAE;IACVC,MAAM,EAAE,EAAE;IACVC,SAAS,EAAC,EAAE;IACZC,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,EAAE;IACfC,YAAY,EAAE,EAAE;IAChBC,aAAa,EAAE,EAAE;IACjBC,KAAK,EAAE,EAAE;IACTC,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE,EAAE;IACVC,UAAU,EAAE;EAChB,CAAC;EAEDC,QAAQ,EAAE;IACNC,0BAA0B,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3C,OAAOD,KAAK,GAAG;QACXhB,MAAM,EAAEiB,MAAM,CAACC,OAAO,CAAClB,MAAM;QAC7BC,SAAS,EAACgB,MAAM,CAACC,OAAO,CAACjB,SAAS;QAClCC,QAAQ,EAAEN,cAAc,CAACqB,MAAM,CAACC,OAAO,CAAChB,QAAQ,CAAC;QACjDC,QAAQ,EAAEc,MAAM,CAACC,OAAO,CAACf,QAAQ;QACjCC,WAAW,EAAEa,MAAM,CAACC,OAAO,CAACd,WAAW;QACvCC,YAAY,EAAEY,MAAM,CAACC,OAAO,CAACb,YAAY;QACzCC,aAAa,EAAEW,MAAM,CAACC,OAAO,CAACZ,aAAa;QAC3CC,KAAK,EAAEU,MAAM,CAACC,OAAO,CAACX,KAAK;QAC3BC,UAAU,EAAES,MAAM,CAACC,OAAO,CAACV,UAAU;QACrCC,SAAS,EAAEQ,MAAM,CAACC,OAAO,CAACT,SAAS;QACnCC,QAAQ,EAAEO,MAAM,CAACC,OAAO,CAACR,QAAQ;QACjCC,QAAQ,EAAEM,MAAM,CAACC,OAAO,CAACP,QAAQ;QACjCE,UAAU,EAAEI,MAAM,CAACC,OAAO,CAACL,UAAU;QACrCD,MAAM,EAAEK,MAAM,CAACC,OAAO,CAACN;MAC3B,CAAC;IACL,CAAC;IAEDO,kBAAkB,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MACnC,OAAOD,KAAK,GAAG;QACX,GAAGA,KAAK;QACRR,UAAU,EAAES,MAAM,CAACC,OAAO,CAACV;MAC/B,CAAC;IACL,CAAC;IAEDY,qCAAqC,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACtD,OAAOD,KAAK,GAAG;QACX,GAAGA,KAAK;QACRL,QAAQ,EAAEM,MAAM,CAACC,OAAO,CAACP,QAAQ;QACjCL,aAAa,EAAEW,MAAM,CAACC,OAAO,CAACZ;MAClC,CAAC;IACL,CAAC;IACDe,wBAAwB,EAAGL,KAAK,IAAK;MACjC,OAAOA,KAAK,GAAG;QACXhB,MAAM,EAAE,EAAE;QACVC,SAAS,EAAC,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZC,WAAW,EAAE,EAAE;QACfC,YAAY,EAAE,EAAE;QAChBC,aAAa,EAAE,EAAE;QACjBC,KAAK,EAAE,EAAE;QACTC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,EAAE;QACbC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZE,UAAU,EAAE,EAAE;QACdD,MAAM,EAAE;MACZ,CAAC;IACL;EAEJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEG,0BAA0B;EAAEI,kBAAkB;EAAEC,qCAAqC;EAAEC;AAAyB,CAAC,GAAGxB,mBAAmB,CAACyB,OAAO;AAE9J,eAAezB,mBAAmB,CAAC0B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}