{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport selectedEmployeeInformationReducer from './selectedEmployeeInformation';\nimport personalInformationReducer from './personalInformation';\nimport { combineReducers } from 'redux';\nimport { createTransform, persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { encryptTransform } from 'redux-persist-transform-encrypt';\nconst config = require('../config/config.json');\nconst rootReducer = combineReducers({\n  personalInformationReducer,\n  selectedEmployeeInformationReducer\n});\nconst encryptor = encryptTransform({\n  secretKey: config.EncryptKey,\n  onError: error => {}\n});\nconst personalInfoTransform = createTransform((inboundState, key) => {\n  return {\n    ...inboundState,\n    dob: inboundState.dob ? inboundState.dob.toDateString() : \"\"\n  };\n}, (outboundState, key) => {\n  return {\n    ...outboundState,\n    dob: outboundState.dob ? new Date(outboundState.dob) : \"\"\n  };\n}, {\n  whitelist: ['personalInformationReducer', 'selectedEmployeeInformationReducer']\n});\nconst persistConfig = {\n  key: 'pmo_user',\n  version: 1,\n  transforms: [personalInfoTransform, encryptor],\n  storage\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nconst reduxStore = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    immutableCheck: false,\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\npersistStore(reduxStore);\nexport default reduxStore;","map":{"version":3,"names":["configureStore","selectedEmployeeInformationReducer","personalInformationReducer","combineReducers","createTransform","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","storage","encryptTransform","config","require","rootReducer","encryptor","secretKey","EncryptKey","onError","error","personalInfoTransform","inboundState","key","dob","toDateString","outboundState","Date","whitelist","persistConfig","version","transforms","persistedReducer","reduxStore","reducer","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","ignoredActions"],"sources":["C:/Users/ITeos/Desktop/My Projects/Git/Dealer Portal/dealer-portal/UI/src/reduxStorage/combinedReducers.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport selectedEmployeeInformationReducer from './selectedEmployeeInformation';\r\nimport personalInformationReducer from './personalInformation';\r\nimport { combineReducers } from 'redux';\r\n\r\nimport {\r\n    createTransform,\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport { encryptTransform } from 'redux-persist-transform-encrypt';\r\n\r\nconst config = require('../config/config.json');\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    personalInformationReducer,\r\n    selectedEmployeeInformationReducer,\r\n});\r\n\r\nconst encryptor = encryptTransform({\r\n    secretKey: config.EncryptKey,\r\n    onError: (error) => {\r\n\r\n    }\r\n})\r\n\r\nconst personalInfoTransform = createTransform(\r\n    (inboundState, key) => {\r\n        return {...inboundState, dob: inboundState.dob ? inboundState.dob.toDateString() : \"\"}\r\n    }, \r\n    (outboundState, key) => {\r\n        return {...outboundState, dob: outboundState.dob ? new Date(outboundState.dob) : \"\"}\r\n    },\r\n    { whitelist: ['personalInformationReducer','selectedEmployeeInformationReducer']}\r\n)\r\n\r\n\r\nconst persistConfig = {\r\n    key: 'pmo_user',\r\n    version: 1,\r\n    transforms: [personalInfoTransform, encryptor],\r\n    storage,\r\n}\r\n\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nconst reduxStore = configureStore({\r\n    reducer: persistedReducer,      \r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware({\r\n        immutableCheck: false,\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n})\r\n\r\npersistStore(reduxStore)\r\n\r\nexport default reduxStore;"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,kCAAkC,MAAM,+BAA+B;AAC9E,OAAOC,0BAA0B,MAAM,uBAAuB;AAC9D,SAASC,eAAe,QAAQ,OAAO;AAEvC,SACIC,eAAe,EACfC,YAAY,EACZC,cAAc,EACdC,KAAK,EACLC,SAAS,EACTC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,QAAQ,QACL,eAAe;AACtB,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,SAASC,gBAAgB,QAAQ,iCAAiC;AAElE,MAAMC,MAAM,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAG/C,MAAMC,WAAW,GAAGd,eAAe,CAAC;EAChCD,0BAA0B;EAC1BD;AACJ,CAAC,CAAC;AAEF,MAAMiB,SAAS,GAAGJ,gBAAgB,CAAC;EAC/BK,SAAS,EAAEJ,MAAM,CAACK,UAAU;EAC5BC,OAAO,EAAGC,KAAK,IAAK,CAEpB;AACJ,CAAC,CAAC;AAEF,MAAMC,qBAAqB,GAAGnB,eAAe,CACzC,CAACoB,YAAY,EAAEC,GAAG,KAAK;EACnB,OAAO;IAAC,GAAGD,YAAY;IAAEE,GAAG,EAAEF,YAAY,CAACE,GAAG,GAAGF,YAAY,CAACE,GAAG,CAACC,YAAY,CAAC,CAAC,GAAG;EAAE,CAAC;AAC1F,CAAC,EACD,CAACC,aAAa,EAAEH,GAAG,KAAK;EACpB,OAAO;IAAC,GAAGG,aAAa;IAAEF,GAAG,EAAEE,aAAa,CAACF,GAAG,GAAG,IAAIG,IAAI,CAACD,aAAa,CAACF,GAAG,CAAC,GAAG;EAAE,CAAC;AACxF,CAAC,EACD;EAAEI,SAAS,EAAE,CAAC,4BAA4B,EAAC,oCAAoC;AAAC,CACpF,CAAC;AAGD,MAAMC,aAAa,GAAG;EAClBN,GAAG,EAAE,UAAU;EACfO,OAAO,EAAE,CAAC;EACVC,UAAU,EAAE,CAACV,qBAAqB,EAAEL,SAAS,CAAC;EAC9CL;AACJ,CAAC;AAGD,MAAMqB,gBAAgB,GAAG5B,cAAc,CAACyB,aAAa,EAAEd,WAAW,CAAC;AAEnE,MAAMkB,UAAU,GAAGnC,cAAc,CAAC;EAC9BoC,OAAO,EAAEF,gBAAgB;EACzBG,UAAU,EAAGC,oBAAoB,IAAKA,oBAAoB,CAAC;IACvDC,cAAc,EAAE,KAAK;IACrBC,iBAAiB,EAAE;MACfC,cAAc,EAAE,CAAClC,KAAK,EAAEC,SAAS,EAAEC,KAAK,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ;IACtE;EACJ,CAAC;AACL,CAAC,CAAC;AAEFP,YAAY,CAAC8B,UAAU,CAAC;AAExB,eAAeA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}